%%
%% file: slgloss.sty
%% authors: Itamar Kastner (NYU) and Jonathan Keane (UChicago), January 2013
%% update (October 2019): Fabian Bross (Uni Stuttgart) and Itamar Kastner (HU Berlin)
%% update (June 2020): Itamar Kastner (U Edinburgh), based on a suggestion by Kate Davidson (Harvard)
%%
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{slgloss}
\RequirePackage{substr}
%% no lowercase option for scripts if they fail with lowercase
\newcommand{\lwr}[1]{\lowercase{#1}}
\DeclareOption{nolowercase}{
  \renewcommand{\lwr}[1]{#1}
}
\ExecuteOptions{}
\ProcessOptions\relax
%

%% Helper methods for \slgdash
\newcommand{\dashover}[2][\mathop]{#1{\mathpalette\df@over{{\dashfill}{#2}}}}
%\newcommand{\fillover}[2][\mathop]{#1{\mathpalette\df@over{{\solidfill}{#2}}}}
\newcommand{\df@over}[2]{\df@@over#1#2}
\newcommand\df@@over[3]{%
  \vbox{
    \offinterlineskip
    \ialign{##\cr
      #2{#1}\cr
      \noalign{\kern1.2pt}
      $\m@th#1#3$\cr
    }
  }%
}
\newcommand{\dashfill}[1]{%
  \kern-.5pt
  \xleaders\hbox{\kern.5pt\vrule height.4pt width \dash@width{#1}\kern.5pt}\hfill
  \kern-.5pt
}
\newcommand{\dash@width}[1]{%
  \ifx#1\displaystyle
    2pt
  \else
    \ifx#1\textstyle
      1.5pt
    \else
      \ifx#1\scriptstyle
        1.25pt
      \else
        \ifx#1\scriptscriptstyle
          1pt
        \fi
      \fi
    \fi
  \fi
}
\newcommand{\solidfill}[1]{\leaders\hrule\hfill}


%% \fs{} takes a word and outputs it as a fingerspelled word
%
\DeclareRobustCommand*\fs[2][]{%
  \let\@tempa\relax%
  \def\@tempb{-}%
  \@tfor\@tempc:=#2\do{%
\textsc{\@tempa \@tempc}\let\@tempa\@tempb%
}%
}

%% \slg[nmm]{text} typesets input in small caps, with the optional nonmanual
%% marker denoted above the text. Scope is marked by an overline.
%% \slgl[nmm]{text} typesets input in small caps, with the optional nonmanual
%% marker denoted above the text, but left-aligned. Scope is marked by an overline
%% \slgdash[nmm]{text} typesets input in small caps, with the optional nonmanual
%% marker denoted above the text. Scope is marked by a dashed overline.
% setup a group where _ and ^ are activated, and then defined as ensuring mathmode, and then sub or super scripting
\begingroup
\catcode`_=\active%
\gdef_#1{\ensuremath{{}\sb{#1}}}%
\catcode`^=\active%
\gdef^#1{\ensuremath{{}\sp{#1}}}%
\endgroup

\makeatletter%
\DeclareRobustCommand*\slg[2][\null]{%
% these two functions are necessary to parse a string in text mode and use the new definitions of _ and ^ the ensures math mode, and sets as sub or super script.
\def\subsup{%
  \begingroup%
    \catcode`_=\active%
    \catcode`^=\active%
    \Xsubsup%
}%
\def\Xsubsup##1{%
    \scantokens{##1\noexpand}%
  \endgroup%
}%
\ifx#1\null%
\subsup{\textsc{\lwr{#2}}}%
\else%
$\stackrel{\hfill \subsup{{\textrm{#1}}}}{\overline{\subsup{\textsc{\lwr{#2}}}}}$%
\fi%
}%


\DeclareRobustCommand*\slgbig[3][\null]{%
% these two functions are necessary to parse a string in text mode and use the new definitions of _ and ^ the ensures math mode, and sets as sub or super script.
\def\subsup{%
  \begingroup%
    \catcode`_=\active%
    \catcode`^=\active%
    \Xsubsup%
}%
\def\Xsubsup##1{%
    \scantokens{##1\noexpand}%
  \endgroup%
}%
\ifx#1\null%
\subsup{\textsc{\lwr{#2}}}%
\else%
$\stackrel{\stackrel{\subsup{\textrm{#1}}}{\subsup{\textrm{#2}}}}
{\overline{\subsup{\textsc{\lwr{#3}}}}}$%
\fi%
}%


\DeclareRobustCommand*\slgl[2][\null]{%
% these two functions are necessary to parse a string in text mode and use the new definitions of _ and ^ the ensures math mode, and sets as sub or super script.
\def\subsup{%
  \begingroup%
    \catcode`_=\active%
    \catcode`^=\active%
    \Xsubsup%
}%
\def\Xsubsup##1{%
    \scantokens{##1\noexpand}%
  \endgroup%
}%
\ifx#1\null%
\subsup{\textsc{\lwr{#2}}}%
\else%
$\stackrel{\subsup{{\textrm{#1}}}\hfill}{\overline{\subsup{\textsc{\lwr{#2}}}}}$%
\fi%
}%


\DeclareRobustCommand*\slgdash[2][\null]{%
% these two functions are necessary to parse a string in text mode and use the new definitions of _ and ^ the ensures math mode, and sets as sub or super script.
\def\subsup{%
  \begingroup%
    \catcode`_=\active%
    \catcode`^=\active%
    \Xsubsup%
}%
\def\Xsubsup##1{%
    \scantokens{##1\noexpand}%
  \endgroup%
}%
\ifx#1\null%
\subsup{\textsc{\lwr{#2}}}%
\else%
$\stackrel{\hfill \subsup{\raisebox{0.03em}{\textrm{#1}}}}{\dashover{\subsup{\textsc{\lwr{#2}}}}}$%
\fi%
}%
\makeatother%

%
%% \fslist{} takes a string of letters and outputs each as a fingerspelled
%% individual letter, if that string contains commas the output is separated at the commas, allowing for arbitrary length units.
%
\newcounter{@tempe}
\makeatletter%
\DeclareRobustCommand*\fslist[2][and]{%
\let\last@item\relax%
\let\last@sep\relax%
\def\@nlast{, }%
\setcounter{@tempe}{0}%
\IfSubStringInString{,}{#2}{
%%% if there are commas in the string, separate by commas
\@for\@ii:=#2\do{%
\ifx\last@item\relax\else%
   \ifx\last@sep\relax%
   \else\@nlast\fi%
   \ifnum\value{@tempe}>0\relax%
      \def\last@sep{, #1 }%
    \else%
      \def\last@sep{ #1 }%
   \fi%
\textsc{\mbox{{-\last@item-}}}%
\addtocounter{@tempe}{1}%
\fi
\let\last@item\@ii
}%
\ifx\last@item\relax\else
\last@sep \textsc{\mbox{{-\last@item-}}}%
\fi
}{%%%% if there are no commas, separate by character.
\@tfor\@ii:=#2\do{%
\ifx\last@item\relax\else%
   \ifx\last@sep\relax%
   \else\@nlast\fi%
   \ifnum\value{@tempe}>0\relax%
      \def\last@sep{, #1 }%
    \else%
      \def\last@sep{ #1 }%
   \fi%
\textsc{\mbox{{-\last@item-}}}%
\addtocounter{@tempe}{1}%
\fi
\let\last@item\@ii
}%
\ifx\last@item\relax\else
\last@sep \textsc{\mbox{{-\last@item-}}}%
\fi
}%%%
}
\makeatother%

%%
%% End of slgloss.sty
